#!/usr/bin/env node

const path = require('path')
const parseArgs = require('minimist')
const fs = require('mz/fs')
const mkdirp = require('mkdirp-then')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help'
  },
  boolean: ['h']
})

const dir = path.resolve(argv._[0] || '.')

if (path.basename(dir) === 'pages') {
  console.warn('Your root directory is named "pages". This looks suspicious. You probably want to go one directory up.')
  process.exit(1)
}

fs.exists(dir)
  .then(present => !present ? mkdirp(dir) : Promise.resolve(present))
  .then(present => {

    if (!fs.existsSync(path.join(dir, 'package.json'))) {
      fs.writeFileSync(path.join(dir, 'package.json'), basePackage.replace(/my-app/g, path.basename(dir)))
    }

    if (!fs.existsSync(path.join(dir, 'static'))) {
      fs.mkdirSync(path.join(dir, 'static'))
    }

    if (!fs.existsSync(path.join(dir, 'pages'))) {
      fs.mkdirSync(path.join(dir, 'pages'))
      fs.writeFileSync(path.join(dir, 'pages', 'Index.js'), indexPage)
      fs.writeFileSync(path.join(dir, 'pages', 'About.js'), aboutPage)
    }

  })
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })

const basePackage = `{
  "private": true,
  "version": "1.0.0",
  "name": "my-app",
  "description": "My app",
  "dependencies": {
    "reunify": "latest"
  },
  "scripts": {
    "dev" : "reunify start --port 8080",
    "start": "reunify start --port 80"
  }
}`

const indexPage = `import React from 'react'
import { Link } from 'react-router'

export default class Index extends React.Component {
  render() {
    return (
      <div>
        <h1>Index Page</h1>
        <ul>
          <li><Link to={'/about'}>Client-Side Link</Link></li>
        </ul>
        <ul>
          <li><a href="/about">Server-Side Link (2s delay)</a></li>
        </ul>
      </div>
    )
  }
}
`

const aboutPage = `import React from 'react'
import { Link } from 'react-router'

export default class About extends React.Component {
  static getInitialProps() {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve({mydata: 'Reunify!'})
      }, 2000)
    })
  }

  render() {
    return (
      <div>
        <h1>About Page</h1>
        <ul>
          <li><Link to={'/'}>Client-Side Back Link</Link></li>
        </ul>
        <ul>
          <li><a href="/">Server-Server Back Link</a></li>
        </ul>
        <h2>Hello from { this.props.mydata }</h2>
      </div>
    )
  }
}
`
